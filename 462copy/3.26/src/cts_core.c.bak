#include "cts_core.h"
#include "cts_hal.h"

#ifndef PROJECT_ID
#error "PROJECT_ID UNDEFINED!"
#endif

#include "thp_ioctl.h"
#include "cts_log.h"
#include "cts_utils.h"
#include "cts_prog.h"
#include "cts_tcs.h"
#include "cts_spi.h"
#include "cts_tool.h"
#include "cts_tcs.h"
#include "thp_afe_hal.h"

//static int cnt = 0;
//#define DEBUG_NOISE

#define TCS_RET_CODE_OK                 0
#define TCS_CMD_VALUE                   0x4122

#define STYLUS_COL_AFTER_TIED           8
#define STYLUS_ROW_AFTER_TIED           12

#define STYLUS_PR_ITEM_SIZE             (COLS * STYLUS_ROW_AFTER_TIED)
#define STYLUS_PC_ITEM_SIZE             (ROWS * STYLUS_COL_AFTER_TIED)

#define STYLUS_PC1_ITEM_OFFSET          000
#define STYLUS_PC2_ITEM_OFFSET          200
#define STYLUS_PR1_ITEM_OFFSET          400
#define STYLUS_PR2_ITEM_OFFSET          600
#define STYLUS_PCR_TATAL_SIZE           800
#define RAW_DEST_DATA                   2500
#define STYLUS_FRAME_TV_ADJUST          3000//4167
#define MAGIC_NUMBER                    0xFEFCF8F0
#define DOUBLE_RATA                     0

static bool first_cali_done = false;

static THP_AFE_FRAME_DATA_STRUCT g_thp_frame;
static THP_AFE_STYLUS_FRAME_DATA_STRUCT g_stylus_frame;
static CTS_IOCTL_FRAME_STRUCT g_ioctl_frame;
uint16_t  g_version=0;
extern uint16_t s_scan_freq[MAX_NUM_SCAN_FREQ];
extern uint16_t s_scan_rate[MAX_NUM_SCAN_RATE];
extern uint16_t s_Fs_raw_dest_value;
uint16_t  last_afe_status=2;
uint16_t  last_stylus_status=0;
uint16_t  last_finger_freq=97;
uint16_t  last_Frame_index=0;
uint16_t  current_afe_data_type = FRAME_TYPE_FINGER_0;
uint16_t  baserawdata[ROWS*COLS] = {0};

int nonblock = SCREEN_ON_FLAG;            //for screenon/screenoff
uint8_t  g_tcs_cmd[MAX_TCS_CMD_NUM] = {0};
static volatile bool g_esd_flag = false;
extern void cts_get_fwfile_version(uint16_t *getfileFwversion);
extern int cts_update_firmware(void);
static THP_AFE_INFO_STRUCT g_thp_info =
{
    VENDOR_NAME,
    PRODUCT_NAME,
    AFE_VERSION,
};

THP_AFE_INFO_STRUCT *cts_get_info(void)
{
    char buf[32];
    snprintf(buf, 32, "HAL%s_FW%04x", AFE_VERSION, g_version);
    MEMCPY(g_thp_info.version, buf, 32);
    CTS_THP_LOGI("%s[VENDOR_NAME], %s[PRODUCT_NAME], %s, build at %s %s",VENDOR_NAME, PRODUCT_NAME, g_thp_info.version, __TIME__, __DATE__);
    return &g_thp_info;
}

void cts_reset_device_hardware(void)
{
    CTS_THP_LOGD("Reset the device");
    thp_ioctl_reset(1);
    mdelay(1);
    thp_ioctl_reset(0);
    mdelay(5);   // min 20ms   safe 60ms
    thp_ioctl_reset(1);
    mdelay(90);      //2024/11/29 modified by mbteng// min 120ms   safe 150ms
}

void cts_reset_hal_buffer(void)
{
    //hal buffer clear
    thp_ioctl_clear_frame_buffer(1);
}

void cts_reset_device(void)
{
    // ic reset
    cts_reset_device_hardware();
    // hal buffer clear
    cts_reset_hal_buffer();
}

int wait_to_norm(uint16_t retryMax, uint16_t  time1msDelay)
{
    uint16_t i = 0;
    int ret;
    uint8_t work_mode;

    do
    {
        ret = cts_tcs_get_work_mode(&work_mode);

        CTS_THP_LOGI("Wait firmware to normal work mode=%d, retry times:%d",work_mode, i*10);

        if (ret == 0 && work_mode == CTS_FIRMWARE_WORK_MODE_NORM)
        {
            return 0;
        }
        else
        {
            CTS_THP_LOGD("Get firmware work mode failed, work_mode: %d", work_mode );
            ret = -1;
            mdelay(time1msDelay);
            continue;
        }
    }
    while ((++i) < retryMax);

    return ret;
}

int wait_to_curr_mode(uint16_t retryMax, uint16_t  time1msDelay)
{
    int i = 0;
    int ret;
    uint8_t curr_mode;

    do
    {
        CTS_THP_LOGI("Wait firmware to WORK_MODE_OPEN_SHORT work, times:%d", i*10);
        ret = cts_tcs_get_curr_mode(&curr_mode);
        if (ret == 0 && curr_mode == CTS_FIRMWARE_WORK_MODE_OPEN_SHORT)
        {
            return 0;
        }
        else
        {
            CTS_THP_LOGI("Get firmware work mode failed, curr_mode: %d", curr_mode);

            ret = -1;
            mdelay(time1msDelay);
            continue;
        }
    }
    while (++i < retryMax);

    return ret;
}

int wait_to_cfg_mode(void)
{
    int i = 0;
    int ret;
    uint8_t work_mode;

    do
    {
        CTS_THP_LOGI("Wait firmware to CTS_FIRMWARE_WORK_MODE_CFG work, times:%d", i);
        ret = cts_tcs_get_work_mode(&work_mode);
        if (ret == 0 && work_mode == CTS_FIRMWARE_WORK_MODE_CFG)
        {
            return 0;
        }
        else
        {
            CTS_THP_LOGE("Get firmware work mode failed, curr_mode: %d", work_mode);
            ret = -1;
            mdelay(10);
            continue;
        }
    }
    while (++i < 150);

    return ret;
}

int cts_NeedUpgradeCheck(void)
{
    int ret = -1;
    int needUpgradeFw = 0;
    uint16_t fw_ver = 0xFFFF;
    uint16_t getfileFwversion=0x00;

    cts_get_fwfile_version( &getfileFwversion );

    CTS_THP_LOGI("get_fw_ver before upgrade ");
    ret = cts_tcs_get_fw_ver(&fw_ver);
    if (ret < 0)
    {
        needUpgradeFw = 1;
        CTS_THP_LOGE("get_fw_ver failed.Do upgrade.needUpgradeFw=%d",needUpgradeFw);
        return needUpgradeFw;
    }
    else
    {
        g_version = fw_ver;
        CTS_THP_LOGI("get_current_fw_ver = 0x%x.", fw_ver);
        if (getfileFwversion == fw_ver)
        {
            CTS_THP_LOGI("0x%x[getFileFwVer] == 0x%x[current_fw_ver]. Do not upgrade.needUpgradeFw=%d", getfileFwversion,fw_ver,needUpgradeFw);
            return needUpgradeFw;
        }
        else
        {
            needUpgradeFw = 1;
            CTS_THP_LOGI("0x%x[getFileFwVer] != 0x%x[current_fw_ver]. Do upgrade.needUpgradeFw=%d", getfileFwversion,fw_ver,needUpgradeFw);
            return needUpgradeFw;
        }
    }
    return needUpgradeFw;
}

int cts_DoUpgrade(void)
{
    int ret = -1;
    uint16_t fw_ver = 0xFFFF;
    CTS_THP_LOGD("Set spi speed 12M--start");
    ret = cts_set_spi_speed(12000000);
    if (ret < 0)
    {
        CTS_THP_LOGI("Set spi speed failed");
    }

    ret = cts_update_firmware();
    if (ret < 0)
    {
        CTS_THP_LOGE("Update firmware failed");
        return -1;
    }

    CTS_THP_LOGE("Update firmware pass");

    CTS_THP_LOGD("Set spi speed 25M--start");
    ret = cts_set_spi_speed(25000000);
    mdelay(5);

    ret = cts_tcs_get_fw_ver(&fw_ver);
    if (ret < 0)
    {
        CTS_THP_LOGE("get_fw_ver failed");
    }
    else
    {
        CTS_THP_LOGI("get current fw ver = %x", fw_ver);
    }

    return 0;
}


static int cts_prework(void)
{
    int ret = -1;
#if  0
    int i;
    uint8_t value[16] = {0};
    CTS_THP_LOGE("0x791F0: read");
    ret = cts_tcs_read_hw_reg(0x791F0, value, sizeof(value));
    if (ret < 0)
    {
        CTS_THP_LOGE("0x791F0: readfailed");
    }

    for (i = 0; i < 16; i++)
    {
        CTS_THP_LOGE("[%2d]:%02x", i, value[i]);
    }

#endif

    cts_reset_device();

    if (cts_NeedUpgradeCheck())
    {
        ret = cts_DoUpgrade();
        if (ret < 0)
        {
            CTS_THP_LOGE("Update firmware failed");
            return -1;
        }

        ret = cts_force_get_hw_cap();
        if (ret < 0)
        {
            CTS_THP_LOGE("Get hw_cap failed");

            return -1;
        }
    }
    else
    {
        ret = cts_force_get_hw_cap();
        if (ret < 0)
        {
            CTS_THP_LOGE("Get hw_cap failed");
            return -1;
        }
    }

    return 0;
}

static int cts_postwork(void)
{
    CTS_THP_LOGE("WARN: Do post work??");

    cts_tcs_set_pwr_mode(2);

    return 0;
}

void cts_normal_mode_init(void)
{
    last_afe_status = THP_AFE_STATUS_ACTIVE_MODE ;
    last_stylus_status = 0;
    inspect_flag = INSPECT_NORMAL_FLAG;
    MEMSET(g_tcs_cmd,0,sizeof(g_tcs_cmd));
}

bool cts_switch_mode(uint8_t i)
{
    //CTS_THP_LOGI("clear level:0x%d", i);
    switch (i)
    {
        case TCS_ENTER_IDLE_LEVEL:
            cts_enter_idle();
            g_tcs_cmd[TCS_ENTER_IDLE_LEVEL] = 0;
            return true;//false;

        case  TCS_CLEAR_STATUS_CALIBRATE_DONE_LEVEL:
            cts_clear_status(THP_AFE_STATUS_CALIBRATION_DONE);
            g_tcs_cmd[TCS_CLEAR_STATUS_CALIBRATE_DONE_LEVEL] = 0;
            return true;

        case TCS_CLEAR_STATUS_FREQ_SHIFT_LEVEL:
            cts_clear_status(THP_AFE_STATUS_FREQ_SHIFT_DONE);
            g_tcs_cmd[TCS_CLEAR_STATUS_FREQ_SHIFT_LEVEL] = 0;
            return true;

        default:
            CTS_THP_LOGI("INVALID VALUE: %{public}d", i);
            return true;
    }

}

void  tcs_cmd_delay_start(void)
{
    uint8_t i;
    for (i = 0; i <  MAX_TCS_CMD_NUM; i++)
    {
        if (g_tcs_cmd[i])
        {
            if ( cts_switch_mode(i) )
            {
                break;
            }
        }
    }
}

static int cts_ioctl_get_frame(CTS_IOCTL_FRAME_STRUCT *ioctl_frame)
{
    int ret = -1;
    uint8_t *frame = ioctl_frame->frame;
    size_t framelen = sizeof(ioctl_frame->frame);
    struct timeval *tv = &ioctl_frame->tv;

    memset(ioctl_frame, 0, sizeof(*ioctl_frame));
    ret = thp_ioctl_get_frame(frame, framelen, tv);
    if (ret < 0)
    {
        CTS_THP_LOGE("Ioctl cts_get_frame failed: %s", strerror(errno));
        return -1;
    }
    ioctl_frame->framelen = framelen;

    return 0;
}

static int cts_check_ioctl_frame(CTS_IOCTL_FRAME_STRUCT *ioctl_frame)
{
    CTS_FRAME_STRUCT *cts_frame = (CTS_FRAME_STRUCT *)ioctl_frame->frame;
    tcs_rx_tail *cts_tcs_ret = (tcs_rx_tail *)
                               (ioctl_frame->frame + FRAME_SIZE);
    uint16_t crc16_calc;

    if (cts_frame->magic_number != MAGIC_NUMBER)
    {
        CTS_THP_LOGE("cts_get_frame Invalid magic number: recv %#010x calc %#010x",
                 cts_frame->magic_number, MAGIC_NUMBER);
        return -1;
    }

    if (cts_frame->curr_frame_size > FRAME_SIZE_HAS_TAIL  )
    {
        CTS_THP_LOGE("cts_get_frame Invalid current frame size: %d > %d",
                 cts_frame->curr_frame_size, FRAME_SIZE_HAS_TAIL);
        return -1;
    }

    if (cts_frame->curr_frame_size < CURRENT_FRAME_MIN_SIZ)
    {
        CTS_THP_LOGE("cts_get_frame Invalid current frame size: %d < ",
                 cts_frame->curr_frame_size, CURRENT_FRAME_MIN_SIZ);
        return -1;
    }

    //  if (cts_frame->next_frame_size > FRAME_SIZE_HAS_TAIL)
    // {
    //    CTS_THP_LOGE("cts_get_frame Invalid next frame size: %d", cts_frame->next_frame_size);
    //      return -1;
    //  }

    crc16_calc = cts_crc16((const uint8_t *)cts_frame,FRAME_SIZE_HAS_TAIL - sizeof(uint16_t));
    if (cts_tcs_ret->crc16 != crc16_calc)
    {
        CTS_THP_LOGE("cts_get_frame Invalid crc16: recv %#06x calc %#06x",
                 cts_tcs_ret->crc16, crc16_calc);
        return -1;
    }

    if (cts_tcs_ret->cmd != TCS_CMD_VALUE)
    {
        CTS_THP_LOGE("cts_get_frame Invalid cmd value: recv %#06x expect %#06x",
                 cts_tcs_ret->cmd, TCS_CMD_VALUE);
        return -1;
    }

    if (cts_tcs_ret->ecode != TCS_RET_CODE_OK)
    {
        CTS_THP_LOGE("cts_get_frame Invalid ret code: recv %d expect %d",
                 cts_tcs_ret->ecode, TCS_RET_CODE_OK);
        return -1;
    }
    return 0;
}

uint16_t FsCoffBuFreq2[ROWS*COLS] =
{
    304,305,306,307,308,309,311,312,313,314,315,316,318,319,320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,
    306,307,308,309,311,312,313,314,315,316,318,319,320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,
    308,309,311,312,313,314,315,316,318,319,320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,
    311,312,313,314,315,316,318,319,320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,
    313,314,315,316,318,319,320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,
    315,316,318,319,320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,
    318,319,320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,
    320,321,323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,
    323,324,325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,
    325,326,328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,
    328,329,330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,
    330,332,333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,
    333,334,336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,
    336,337,338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,
    338,340,341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,
    341,342,344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,
    344,345,347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,
    347,348,350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,
    350,351,352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,
    352,354,355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,
    355,357,358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,
    358,360,362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,
    362,363,365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,
    365,366,368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,
    368,370,371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,
    371,373,375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,
    375,376,378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,
    378,380,381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,
    381,383,385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,
    385,387,388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,
    388,390,392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,
    392,394,396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,
    396,398,400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,
    400,401,403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,
    403,405,407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,
    407,409,411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,
    411,413,415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,
    415,417,420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,
    420,422,424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,
    424,426,428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,
    428,430,432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,
    432,435,437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,512,515,
    437,439,442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,512,515,518,521,
    442,444,446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,512,515,518,521,525,528,
    446,449,451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,512,515,518,521,525,528,531,535,
    451,454,456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,512,515,518,521,525,528,531,535,538,541,
    456,459,461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,512,515,518,521,525,528,531,535,538,541,545,549,
    461,464,466,469,471,474,477,480,482,485,488,491,494,497,500,502,506,509,512,515,518,521,525,528,531,535,538,541,545,549,552,556,
};

uint16_t FsCoffBuFreq1[ROWS*COLS] =
{
    240,241,242,243,243,244,245,245,246,247,248,248,249,250,251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,
    242,243,243,244,245,245,246,247,248,248,249,250,251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,
    243,244,245,245,246,247,248,248,249,250,251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,
    245,245,246,247,248,248,249,250,251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,
    246,247,248,248,249,250,251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,
    248,248,249,250,251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,
    249,250,251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,
    251,251,252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,
    252,253,254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,
    254,255,255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,
    255,256,257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,
    257,258,259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,
    259,259,260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,
    260,261,262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,
    262,263,264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,
    264,264,265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,
    265,266,267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,
    267,268,269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,
    269,270,270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,
    270,271,272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,
    272,273,274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,
    274,275,276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,
    276,277,278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,
    278,279,280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,
    280,281,282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,
    282,283,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,
    283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,
    285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,
    287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,
    289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,
    292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,
    294,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,
    296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,
    298,299,300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,
    300,301,302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,
    302,303,304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,
    304,306,307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,
    307,308,309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,
    309,310,311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,
    311,313,314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,
    314,315,316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,
    316,317,319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,357,359,
    319,320,321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,357,359,361,362,
    321,322,324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,357,359,361,362,364,365,
    324,325,326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,357,359,361,362,364,365,367,369,
    326,328,329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,357,359,361,362,364,365,367,369,370,372,
    329,330,331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,357,359,361,362,364,365,367,369,370,372,374,375,
    331,333,334,336,337,338,340,341,343,344,345,347,348,350,351,353,354,356,357,359,361,362,364,365,367,369,370,372,374,375,377,379,
};

uint16_t FsCoffBuFreq0[ROWS*COLS] =
{
    254,255,243,246,246,257,251,251,253,246,258,265,267,267,270,269,275,291,294,301,293,288,288,279,270,265,264,252,250,251,248,251,251,249,255,249,252,259,273,282,
    244,257,254,248,244,244,242,242,241,238,235,238,238,242,246,254,262,272,276,286,267,265,261,253,252,251,248,242,238,238,229,233,234,233,243,249,260,262,267,272,
    238,249,248,240,233,247,242,238,238,234,255,260,263,269,273,256,265,266,269,280,280,267,269,266,256,234,226,225,213,222,227,230,233,234,243,239,245,250,258,262,
    243,253,250,245,241,245,242,242,240,237,243,249,249,257,260,266,274,275,279,292,269,264,261,252,252,248,245,238,232,235,228,231,230,232,245,254,258,265,271,275,
    233,252,238,238,232,232,224,225,225,226,258,266,268,275,279,262,268,270,272,281,266,267,261,252,254,232,233,228,223,225,234,236,238,238,249,254,258,264,272,278,
    243,254,250,245,242,239,236,236,235,231,223,229,233,240,243,263,266,274,275,284,274,268,263,255,254,247,242,237,231,233,223,230,238,231,238,245,252,259,270,276,
    252,256,251,244,242,229,227,231,225,227,248,255,259,263,267,278,284,289,290,299,292,281,271,273,268,240,240,239,230,228,236,240,243,245,252,262,267,274,283,289,
    247,256,252,249,243,253,251,249,248,245,242,249,253,258,266,281,286,288,294,303,287,280,275,268,266,257,253,247,242,242,241,244,247,250,256,262,269,275,283,295,
    241,256,243,238,237,230,228,232,226,223,242,248,253,258,262,282,287,291,296,301,277,271,270,263,261,256,251,247,241,240,232,235,238,240,245,260,267,273,284,293,
    256,269,266,262,257,243,242,242,241,238,231,242,242,249,251,277,281,282,285,291,280,273,267,261,258,246,244,239,234,233,237,243,248,248,251,256,258,270,278,287,
    258,269,266,262,260,234,233,234,235,233,232,239,242,249,251,280,287,288,291,299,276,271,271,258,256,252,248,248,237,236,240,243,247,248,253,251,257,265,274,280,
    254,266,263,260,255,241,240,239,238,238,254,261,265,270,273,268,279,279,283,293,289,284,278,271,269,262,259,253,247,248,247,251,258,258,261,259,265,273,281,292,
    253,261,262,257,253,248,241,240,248,240,238,243,247,252,257,272,281,281,284,294,271,267,263,253,249,264,252,246,247,245,240,245,247,248,251,261,268,275,284,297,
    249,260,256,254,248,241,240,241,239,236,256,260,265,273,278,266,280,281,284,291,280,273,269,261,258,257,255,251,243,244,237,246,247,248,250,252,258,267,275,288,
    249,258,253,256,244,233,234,232,236,228,250,256,261,266,269,287,295,295,300,308,311,309,295,282,290,261,261,249,241,246,242,251,254,253,257,255,261,268,276,287,
    265,279,273,271,267,250,248,247,245,243,253,261,263,268,272,292,297,300,307,315,301,296,290,283,280,267,262,258,252,249,248,260,262,264,265,277,280,291,298,315,
    259,268,262,260,257,254,253,253,251,249,246,253,256,263,270,299,299,299,302,316,296,293,283,278,272,256,251,247,242,241,236,244,242,244,247,263,269,274,286,293,
    239,252,245,247,242,263,254,249,248,249,252,258,263,271,273,285,289,288,294,303,284,279,269,268,259,262,253,246,243,246,249,256,260,261,263,260,266,272,280,292,
    261,273,267,265,261,257,253,254,252,248,250,252,258,266,270,287,292,293,296,303,306,299,291,288,283,270,265,261,255,255,254,263,268,267,269,266,275,282,290,299,
    257,264,263,262,250,245,235,238,237,233,261,266,270,277,280,277,284,285,289,300,284,281,275,273,263,254,245,247,238,237,253,257,261,262,263,276,283,291,299,309,
    265,277,270,269,263,265,260,263,260,258,248,254,255,263,267,292,296,298,303,314,289,285,277,271,265,279,276,272,267,266,244,252,253,256,253,267,275,283,289,303,
    267,281,272,269,267,240,236,240,237,238,262,267,273,281,283,317,323,323,326,338,289,281,277,274,266,254,256,247,241,245,249,256,259,259,261,283,290,297,308,315,
    267,278,272,268,264,255,255,255,252,250,244,249,253,264,264,282,290,295,295,306,296,289,281,277,271,274,276,266,260,261,254,257,261,263,265,258,266,275,282,291,
    262,275,268,267,259,245,241,240,236,237,262,267,270,279,283,297,304,305,308,317,282,270,263,262,253,263,264,250,244,244,272,278,280,281,282,276,282,292,299,308,
    271,281,275,272,267,255,252,251,250,245,252,260,262,271,275,301,310,310,310,329,307,301,293,286,282,265,264,256,249,247,260,267,270,268,270,270,277,287,294,302,
    259,270,264,258,254,248,246,245,244,241,261,269,272,280,282,309,316,315,316,332,285,282,273,265,258,264,263,253,246,242,257,264,268,266,268,271,275,285,293,303,
    266,279,271,270,265,249,247,246,242,241,250,257,264,272,271,285,295,295,300,310,295,289,280,272,269,262,260,253,247,245,251,254,257,257,261,267,269,278,286,293,
    264,283,271,270,265,238,237,241,236,239,256,262,267,275,276,297,303,303,305,316,306,297,283,279,272,269,265,259,252,248,264,269,270,272,273,279,286,294,304,311,
    273,283,277,275,269,259,257,255,252,247,264,270,275,282,286,300,307,304,316,320,302,296,289,278,275,278,276,268,263,257,247,254,257,259,256,280,287,295,300,306,
    266,278,276,269,265,246,244,246,243,237,276,281,286,294,297,294,301,301,306,316,305,288,287,282,278,270,268,257,252,245,255,264,265,267,268,275,281,290,295,305,
    273,282,277,276,269,265,260,260,257,253,266,273,276,282,289,298,308,306,315,329,297,289,281,276,272,272,269,264,259,254,251,256,258,262,265,273,275,284,294,299,
    272,273,277,275,269,262,257,258,255,252,261,266,274,282,283,313,332,325,335,342,311,298,293,286,278,272,269,262,255,248,263,269,271,272,275,288,293,302,312,320,
    262,268,273,267,264,258,260,253,254,250,270,275,280,288,290,299,310,311,313,324,290,287,279,269,267,264,262,255,248,246,270,276,279,280,282,275,280,287,296,304,
    273,267,273,273,268,273,270,270,266,262,272,278,285,290,293,308,321,321,323,335,304,295,284,280,274,283,281,275,271,262,250,258,259,267,266,274,281,290,296,307,
    268,265,274,266,261,266,263,262,258,260,275,280,285,292,294,298,311,310,315,321,318,304,304,294,287,275,272,268,260,255,274,281,282,282,285,283,289,299,306,316,
    284,280,287,284,277,267,262,263,260,255,267,275,284,286,288,300,314,313,313,325,299,289,283,279,273,283,278,272,266,259,258,267,270,271,273,278,289,298,305,314,
    274,270,277,273,265,264,261,259,256,252,270,276,280,287,289,326,340,338,344,354,300,291,283,278,268,274,267,264,251,247,259,266,269,270,272,278,284,294,301,311,
    299,294,301,298,292,260,256,255,252,250,261,269,274,279,280,320,332,331,336,340,319,309,301,295,287,277,273,266,263,257,260,269,272,271,271,284,288,297,300,317,
    269,266,270,269,259,261,258,258,253,256,296,300,304,311,310,310,323,323,328,333,300,299,290,281,277,272,269,265,257,252,262,266,270,271,273,284,289,296,308,316,
    272,269,275,273,267,261,256,255,251,248,280,285,288,290,291,296,313,308,314,322,326,317,305,298,292,288,283,278,271,265,254,258,260,260,262,265,269,279,289,297,
    281,280,284,285,274,264,257,258,248,247,275,278,282,288,291,312,324,325,329,335,310,303,295,291,281,279,278,269,252,254,265,270,273,275,274,283,289,296,309,320,
    275,273,279,274,267,283,280,278,273,270,270,274,278,283,288,314,324,330,331,333,312,305,295,286,279,276,271,265,259,257,265,270,270,273,273,291,298,303,317,328,
    266,265,272,266,259,264,258,261,256,246,278,283,285,288,293,313,323,324,328,334,311,297,292,286,277,267,256,249,248,245,264,270,273,273,275,294,299,303,316,328,
    296,294,299,298,290,275,269,268,264,258,300,305,309,312,314,304,315,312,319,328,329,318,311,303,297,294,287,284,277,269,266,273,276,275,279,283,285,289,304,311,
    288,291,294,288,279,269,257,263,255,258,292,298,301,305,309,311,323,321,326,332,293,296,282,278,270,279,278,271,265,252,277,284,286,286,288,289,296,301,313,323,
    292,290,296,291,286,285,278,276,272,271,285,291,299,294,303,305,317,320,321,331,318,311,301,294,285,289,282,278,273,269,272,277,281,282,282,296,302,307,317,330,
    290,285,290,286,280,275,270,270,266,262,299,303,311,315,322,312,321,323,330,331,314,308,299,291,284,290,283,279,273,267,264,274,273,275,282,293,300,311,323,331,
    277,275,277,278,265,266,258,264,256,254,286,292,296,299,298,305,317,316,313,323,308,295,289,284,275,258,249,252,246,242,269,275,279,279,280,296,299,306,320,328,
    280,281,283,280,273,276,270,271,265,264,285,292,299,296,300,318,332,329,329,336,326,321,311,303,295,287,280,276,273,266,278,285,289,291,289,318,326,331,341,347,
    284,280,282,284,276,265,258,254,251,246,296,303,308,308,312,320,332,331,335,340,307,300,288,281,276,280,272,271,270,260,280,285,288,287,292,289,295,299,312,317,
    289,290,294,291,282,272,264,267,264,261,290,298,299,299,309,306,314,320,323,321,300,297,289,280,271,297,290,287,282,273,269,271,276,276,277,296,299,303,313,321,
    289,280,286,287,277,268,266,267,261,258,289,295,300,300,302,315,326,323,327,331,317,311,299,294,284,264,257,252,250,241,279,285,286,286,289,313,318,321,335,342,
    290,287,294,289,280,285,280,278,275,272,286,295,298,299,303,298,306,305,306,315,306,301,292,284,276,272,267,260,256,251,273,278,283,281,284,296,302,310,321,324,
    274,272,279,276,268,265,258,262,255,252,285,291,294,292,298,325,335,336,337,345,313,299,296,284,275,287,276,272,264,266,273,277,280,280,285,292,300,305,312,316,
    291,290,298,291,280,273,266,267,262,260,292,300,304,301,307,312,321,328,325,331,317,310,305,295,286,280,272,268,265,258,275,281,282,282,284,289,297,303,309,316,
    283,276,285,277,266,279,274,273,264,262,285,292,293,293,299,335,342,344,344,350,314,310,304,297,286,264,263,261,249,244,276,281,285,284,289,304,310,318,324,323,
    290,285,291,286,280,273,264,265,260,259,287,290,297,295,301,332,338,341,337,347,325,320,308,303,290,284,275,271,266,264,275,276,281,280,280,313,318,325,329,331,
    271,268,277,269,263,267,262,263,257,262,301,308,311,311,315,334,340,346,342,350,321,316,304,299,286,278,273,272,268,267,285,287,292,291,295,301,309,316,320,321,
    294,291,298,291,284,296,289,292,286,285,298,306,306,305,308,339,343,350,349,354,328,322,310,306,294,285,279,276,269,266,282,287,288,289,292,302,309,318,322,322,
    277,276,284,278,272,272,259,265,266,265,297,302,307,304,306,323,330,335,328,332,323,317,307,301,288,287,277,275,264,264,275,281,286,286,289,315,321,330,332,332,
};

uint16_t FsCoffBuFreqNormalize[ROWS*COLS] =
{
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
    300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,
};

uint16_t tx1PcCoffBuf[COLS_STYLUS_TIED * ROWS] =
{
    122,121,114,112,111,112,112,116,118,115,111,110,111,108,106,105,108,113,117,124,123,121,114,107,110,113,113,114,115,115,109,109,110,104,105,103,108,110,114,
    122,118,113,112,108,111,111,115,117,114,108,111,108,105,104,106,107,111,116,121,120,115,111,112,108,112,111,114,115,112,107,109,107,104,104,105,106,108,115,
    119,116,113,109,106,110,109,113,114,112,106,109,108,105,104,102,107,108,114,119,119,114,111,110,105,110,114,113,113,112,105,108,108,102,105,101,105,107,112,
    117,112,110,107,104,106,108,112,113,109,107,107,105,104,106,104,106,109,113,120,117,112,110,107,103,107,107,111,115,112,104,107,105,103,102,101,103,107,109,
    116,111,107,105,101,103,105,112,109,110,102,104,106,101,101, 99,102,105,111,117,117,112,109,105,102,104,105,107,109,109,103,105,105,102,100,104,103,104,108,
    112,110,106,103,101,100,101,107,105,107,101,105,105, 98, 99,100,105,106,109,115,112,109,106,105,100,102,104,107,107,106,102,104,104,100, 98, 98,100,102,106,
    109,107,104,100, 98, 99,100,103,106,103,101,103,103, 97, 97, 96,102,102,108,113,109,105,104, 99, 98,101,100,103,103,103,100,102,101, 96, 96, 94, 99,100,103,
    110,105,101, 99, 96, 97, 98,101,101, 99,102,100,100, 96, 95, 93, 97,101,105,110,110,106,101, 96, 96, 96, 97,102,101, 99,100,100, 99, 94, 94, 92, 96, 98,101,
    107,102, 97, 96, 94, 95, 96, 98,100, 99, 96, 99, 98, 95, 94, 94, 98, 98,104,109,108,102, 99, 95, 96, 95, 94, 98, 99, 97, 99, 98, 97, 95, 93, 91, 97, 96,101,
    108, 99, 95, 94, 90, 91, 91, 96, 95, 93, 94, 97, 96, 94, 91, 94, 93, 96,106,108,103, 98, 94, 91, 89, 91, 92, 96, 95, 94, 94, 95, 94, 90, 91, 88, 94, 94, 97,
    102, 97, 92, 90, 86, 91, 89, 91, 93, 91, 91, 93, 92, 92, 89, 86, 89, 95, 99,103,101, 95, 93, 91, 87, 88, 89, 92, 93, 91, 92, 95, 93, 89, 88, 85, 90, 93, 95,
    104, 99, 94, 90, 90, 96, 92, 99, 98, 97,103,104,103, 97, 96, 92,102, 97,103,110,107, 99, 91, 90, 87, 93, 98, 96,101,104,100,101, 98, 94, 96, 88, 91, 95, 98,
};
uint16_t tx1PrCoffBuf[COLS * ROWS_STYLUS_TIED] =
{ 
    98,101,102,108, 89, 90, 79, 86,
    93, 90, 78, 88, 98,101,108,111,
    90, 92, 80, 87, 92, 92, 80, 92,
    100,106,108,108, 90, 92, 83, 88,
    94, 91, 80, 91,104,104,105,114,
    93, 92, 81, 89, 89, 92, 82, 89,
    104,102,112,117, 89, 94, 82, 90,
    92, 90, 78, 92,102,110,113,115,
    93, 90, 78, 94, 90, 94, 79, 91,
    106,109,113,111, 93, 90, 80, 95,
    96, 93, 80, 95,107,112,114,111,
    93, 97, 82, 97, 96, 95, 83, 95,
    107,105,110,108, 94, 91, 81, 93,
    97, 95, 80, 92,104,103,105,112,
    95, 99, 82, 93, 99, 95, 83, 95,
    102,101,110,113, 94, 97, 84, 92,
    96, 97, 85, 95,100,105,111,118,
    94, 98, 86, 94, 99, 98, 86, 95,
    105,107,114,122, 93, 94, 83, 95,
    97, 96, 84, 98,106,111,119,117,
    97, 94, 87, 96, 97, 94, 85, 95,
    109,116,119,114, 94, 96, 86, 98,
    102, 97, 87, 98,112,115,114,110,
    96, 95, 87, 98,101, 98, 88,100,
    115,109,108,108,100, 95, 90, 98,
    102, 95, 88, 99,109,107,107,103,
    97, 98, 88, 95,100, 94, 91, 99,
    106,103,102,105, 98, 93, 89, 96,
    104, 95, 91, 97,105,101,104,104,
    96, 97, 93,100,103, 97, 90, 98,
    100,102,105,110, 97, 97, 94, 95,
    102, 99, 93, 97, 99,103,108,109,
    100, 96, 91,104,105, 97, 93,102,
    98,105,109,109,100,100, 95, 99,
    105,100, 92, 97,105,107,106,115,
    99, 93, 93,102,101, 94, 94,100,
    105,104,112,115,102, 98, 96,104,
    104, 97, 96,102,101,112,114,114,
    99, 95, 97,104,103, 95, 98,105,
    107,115,113,113,102, 95, 97,103,
    102, 98, 96,103,105,111,109,113,
    105, 97, 97,103,108, 97, 97,105,
    107,107,110,110,104, 96, 96,104,
    105, 97, 97,103,101,107,106,107,
    102, 97,100,104,107, 95, 99,104,
    100,103,109,114,107, 96,100,105,
    104, 97, 99,104,101,107,113,121,
    104, 94,102,104,108, 98,100,108,
    103,110,116,123,105, 97,101,107,
    104, 97,103,109,106,112,119,124,
    106, 98,100,106,106, 98,103,106,
    110,117,117,117,104, 98,102,109,
    108, 98,104,108,112,120,115,113,
    108,100,105,107,109, 99,103,107,
    114,113,108,108,106, 99,102,108,
    109, 97,103,108,108,109,106,105,
    112, 98,102,110,111, 97,102,108,
    104,106,105,106,107, 97,108,108,
    107, 98,108,110,103,104,104,108,
    109, 99,111,105,109,101,111,108,
};
uint16_t tx2PcCoffBuf[COLS_STYLUS_TIED * ROWS] =
{
};
uint16_t tx2PrCoffBuf[COLS * ROWS_STYLUS_TIED] =
{
};

static uint16_t grid_data[RAWDATA_NODES];
uint16_t base_data_even[RAWDATA_NODES];
uint16_t grid_last_even_data[RAWDATA_NODES];

void cts_print_rawdata(uint16_t *rawdata)
{
    char line_buf[ROWS * 6 + 128];
    int offset = 0,i,j;
    CTS_THP_LOGD("frame data");

    for (i = 0; i < ROWS; i++)
    {
        offset = 0;
        for (j = 0; j < COLS; j++)
        {
            offset += snprintf(line_buf + offset,sizeof(line_buf) - offset," %4d", rawdata[i * COLS + j]);
        }
        offset += snprintf(line_buf + offset,
                           sizeof(line_buf) - offset, "\n");
        CTS_THP_LOGE("%s", line_buf);
    }
}

void cts_print_stylusdata(uint16_t freqIndex, uint16_t *rawdata, uint16_t row, uint16_t col)
{
    char line_buf[ROWS * 6 + 128];
    int offset = 0,i,j;

    CTS_THP_LOGD("freq%d -----stylus data",freqIndex);

    for (i = 0; i < row; i++)
    {
        offset = 0;
        for (j = 0; j < col; j++)
        {
            offset += snprintf(line_buf + offset,sizeof(line_buf) - offset," %4d", rawdata[i * col + j]);
        }
        offset += snprintf(line_buf + offset,sizeof(line_buf) - offset, "\n");
        CTS_THP_LOGE("%s", line_buf);
    }
}

static void cts_transposition_pr_data(uint16_t *src_data, uint16_t *dsc_data, uint16_t nrows, uint16_t ncols)
{
	uint16_t i, j;
	for (i = 0; i < nrows; i++) {
		for (j = 0; j < ncols; j++)
			//dsc_data[i*ncols + j] = src_data[j*nrows + i];
			dsc_data[i*ncols + j] = src_data[nrows*ncols - (j*nrows + i) - 1];
	}
}

static void cts_transposition_pc_data(uint16_t *src_data, uint16_t *dsc_data, uint16_t nrows, uint16_t ncols)
{
	uint16_t i, j;
	for (i = 0; i < nrows; i++) {
		for (j = 0; j < ncols; j++)
			//dsc_data[i*ncols + j] = src_data[j*nrows + i];
			dsc_data[i*ncols + j] = src_data[nrows*ncols - (j*nrows + i) - 1];
	}
}


#if  1
static void cts_remap_grid_data(uint16_t *src_data, uint16_t *dsc_data, uint16_t nrows, uint16_t ncols)
{
    uint16_t i, j;
	uint16_t tmpdata[ROWS*COLS] = {0};
	
    for (i = 0; i < (ROWS*COLS); i++)
        tmpdata[ROWS*COLS-1-i] = src_data[i];

    for (i = 0; i < COLS; i++) {
        for (j = 0; j < ROWS; j++)
            dsc_data[j + i * ROWS] = tmpdata[i + j * COLS];
    }
}

static int cts_convert_grid_data(CTS_FRAME_STRUCT *thp_ctsframe)
{
    // int dst, src;
    int temp,index;

#if 0  
    uint16_t temp_rawdata[RAWDATA_NODES];
    uint16_t noise_data[RAWDATA_NODES];
   

    uint16_t raw_data[32*50] = {0};
    int offest =0;
#endif

    uint16_t *FsCoffBuFreq = NULL;
//#define NORMALIZE_MODE
#ifdef NORMALIZE_MODE
    FsCoffBuFreq = FsCoffBuFreqNormalize;
#else
    if(thp_ctsframe->finger_scan_freq == s_scan_freq[0])
    {
       FsCoffBuFreq = FsCoffBuFreq0;
    }
    else if(thp_ctsframe->finger_scan_freq == s_scan_freq[1])
    {
      FsCoffBuFreq = FsCoffBuFreq0;
    }
    else if(thp_ctsframe->finger_scan_freq == s_scan_freq[2])
    {
      FsCoffBuFreq = FsCoffBuFreq0;
    }
    else{
        FsCoffBuFreq = FsCoffBuFreq0;
    }
#endif    

    for (int i = 0; i < ROWS; i++)
    {
        for (int j = 0; j < COLS; j++)
        {
            index = i*COLS + j;
            temp = (int)(grid_data[index] - baserawdata[index]);
            grid_data[index] = (int)(temp * FsCoffBuFreq[index] / 100) + 0x8000;
#ifdef NOISE_LOG
             //memcpy(temp_rawdata, grid_data, sizeof(temp_rawdata));
#endif
        }
    }

    /********************************************************************************************************************/
#ifdef NOISE_LOG
        cnt ++;

       if (cnt == 1)
        {
            // memcpy(max_rawdata, curr_rawdata, sizeof(max_rawdata));
            // memcpy(min_rawdata, curr_rawdata, sizeof(min_rawdata));
             memcpy(max_rawdata, grid_data, sizeof(max_rawdata));
             memcpy(min_rawdata, grid_data, sizeof(min_rawdata));
        }
        else
        {
            for (i = 0; i < RAWDATA_NODES; i++)
            {
                if (grid_data[i] > max_rawdata[i])
                {
                    max_rawdata[i] = grid_data[i];
                }
                else if (grid_data[i] < min_rawdata[i])
                {
                    min_rawdata[i] = grid_data[i];
                }
            }
        }
        for (i = 0; i < RAWDATA_NODES; i++)
         {
           noise_data[i] = max_rawdata[i] - min_rawdata[i];
        
         }

         if((cnt%30) == 0 )
         {
            cnt =0;
            memset(max_rawdata, 0, sizeof(max_rawdata));
            memset(min_rawdata, 0, sizeof(max_rawdata));

            cts_dump_tsdata("noise", 30, noise_data);
            //cts_print_rawdata(noise_data);
            //LOGD("1111222");
            //cts_print_rawdata(min_rawdata);
         }
#endif            
    if ((thp_ctsframe->afe_status & 0x40) == 0x40)
    {
        //cts_tcs_get_debug_info(&debug);
        //read_hard_reg();
        CTS_THP_LOGI("sos,print origina data");
        // cts_print_fw_status(thp_ctsframe);
        // cts_print_rawdata(thp_ctsframe->rawdata);

    }   

    // memcpy(thp_ctsframe->rawdata, grid_data, ROWS*COLS*2);
#if 0
    if (!poweron)
    {
        memcpy(base, thp_data, RAWDATA_SIZE);
    }
#endif
    return 0;
}

#elif 0
static void cts_convert_grid_data(uint16_t *src_data, uint16_t *dsc_data, uint16_t nrows, uint16_t ncols)
{
    uint16_t i;
    for (i = 0; i < nrows*ncols; i++)
    {
        dsc_data[i] = 0x8000 + (src_data[i] - s_Fs_raw_dest_value)*5/2;
    }
}

#else
static int cts_convert_grid_data_new(uint16_t *thp_data,  uint16_t  finger_scan_freq)
{
    int i, j;
    int dst, src;


    uint16_t Ka=10,Kb=10;

#if  0
    if (finger_scan_freq == F_FREQ2 )
        Ka=12;
    else if (finger_scan_freq == F_FREQ3 )
        Ka=15;
    else
        Ka=10;
#else
    Ka = finger_scan_freq;
    Kb = F_FREQ1;
#endif

    for (i = 0; i < ROWS; i++)
    {
        for (j = 0; j < COLS; j++)
        {
            dst = i * COLS + j;
            src = j * ROWS + i;

#if  0
            grid_data[dst] = (((thp_data[src] - s_Fs_raw_dest_value) * FsCoffBuf[src]/ 100) + 0x8000);
#else
            grid_data[dst] = (((thp_data[src] - s_Fs_raw_dest_value) * FsCoffBuf[src]* Ka/Kb/ 100) + 0x8000);
#endif
        }
    }

    memcpy(thp_data, grid_data, RAWDATA_SIZE);

    return 0;
}
#endif

//add yjl  ---need  check  para
//#define   CHECK_CALIBRATION_DONE_DATA

#ifdef   CHECK_CALIBRATION_DONE_DATA
#define   CALIBRATION_DONE_RAW_CHECK_DELTA        FS_RAW_DEST_VALUE
#define   CALIBRATION_DONE_RAW_CHECK_ERR_MAX_THD  (FS_RAW_DEST_VALUE*3)
#define   CALIBRATION_DONE_RAW_CHECK_ERR_MIN_THD  (FS_RAW_DEST_VALUE/4)

bool AppBeforeCheckCalibrationDone(uint16_t* rawdata)
{
    uint8_t  i, raw[4], col[4];
    uint8_t  CMDA1 = ROWS/2, LeftLength = COLS/2, RightLength = COLS/2;
    uint16_t offset, temp[4], max = 0, min = 0xFFFF;

    raw[0] = rand() % CMDA1;
    raw[1] = raw[0];
    col[0] = rand() % LeftLength;
    col[1] = rand() % RightLength + LeftLength;

    raw[2] = rand() % CMDA1 + CMDA1;
    raw[3] = raw[2];
    col[2] = rand() % LeftLength;
    col[3] = rand() % RightLength + LeftLength;


    for (i = 0; i < 4; i++)
    {
        offset = raw[i] * COLS + col[i];

        temp[i] = rawdata[offset];
        if (temp[i] > max)
        {
            max = temp[i];
        }
        if (temp[i] < min)
        {
            min = temp[i];
        }

        //CTS_THP_LOGI("offset:%04d,%04d,%04d",raw[i], col[i], temp[i]);
    }
    // CTS_THP_LOGI("raw jump:%04d,", max - min);
    if ((abs(max - min) > CALIBRATION_DONE_RAW_CHECK_DELTA)
        ||( max >  CALIBRATION_DONE_RAW_CHECK_ERR_MAX_THD)
        ||( min <  CALIBRATION_DONE_RAW_CHECK_ERR_MIN_THD)
       )
    {
        return  true;
    }
    return false;
}
#endif

#define BIG_NEG_DIFF_TH                  100
#define BIG_NEG_AREA_TH                  10
#define INTER_FRAME_NOISE_DIFF_TH        50
#define INTER_FRAME_NOISE_AREA_TH        8
#define NONE_NOISE_FRAME_TH              10
//add yjl  ---need  check  para

void cts_calibrate_check( uint16_t *rawdata,CTS_FRAME_STRUCT *cts_frame)
{
    uint8_t i, j;
    uint16_t  offset;
    uint16_t u16BigNoiDiffCnt = 0;
    int16_t g_s16realdiff0,  g_s16stable0;   //even
    static uint16_t u16NoneNoiFrameCnt =0;
    static uint16_t u16BigDiffNegCnt = 0 ;
    static  bool  nobase_even=true, negdiffFlag=false;
    int done_flag =0;

#ifdef   CHECK_CALIBRATION_DONE_DATA
    if ( AppBeforeCheckCalibrationDone(rawdata))
    {
        return;
    }
#endif

    if (1)
    {
        static  bool  noLastRaw=true;
        if ( ((cts_frame->frame_type & 0x01) ==0x01 ) &&
             (((cts_frame->afe_status & THP_AFE_STATUS_CALIBRATION_DONE )== THP_AFE_STATUS_CALIBRATION_DONE) || (cts_frame->frame_index == 1))
           )
        {
            return;
        }
        else if ( ((cts_frame->frame_type & 0x01) ==0x00 ) &&
                  ( (cts_frame->frame_index ==2) || noLastRaw || nobase_even ))
        {
            memcpy(base_data_even, rawdata, RAWDATA_SIZE);
            nobase_even=false;

            noLastRaw = false;
            memcpy(grid_last_even_data, rawdata, RAWDATA_SIZE);
            return;
        }
    }

    if (   (cts_frame->afe_status & THP_AFE_STATUS_SOS ) ==THP_AFE_STATUS_SOS || (cts_frame->afe_status & THP_AFE_STATUS_CALIBRATION_DONE ) ==THP_AFE_STATUS_CALIBRATION_DONE  )
    {
        return;
    }

    if ((cts_frame->frame_type & 0x01) ==0x01)
    {
        negdiffFlag =false;
        for (i = 0; i < COLS; i++)
        {
            for (j = 0; j < ROWS; j++)
            {
                offset = i*ROWS+j;
                g_s16realdiff0 = rawdata[offset] - base_data_even[offset];


                if (g_s16realdiff0 < (0- (int16_t)BIG_NEG_DIFF_TH))
                {
                    u16BigDiffNegCnt = u16BigDiffNegCnt +  abs(g_s16realdiff0)/BIG_NEG_DIFF_TH;
                }
            }

            if (  u16BigDiffNegCnt > BIG_NEG_AREA_TH  )
            {
                negdiffFlag  =true;
                break;
            }
        }
        return;
    }
    else
    {
        if (  negdiffFlag ==false )
        {
            memcpy(grid_last_even_data, rawdata,RAWDATA_SIZE);
            u16BigDiffNegCnt =0;

            // CTS_THP_LOGD("no neg diff--- u16BigDiffNegCnt  =  %4d", u16BigDiffNegCnt);
            return;
        }
        negdiffFlag =false ;
    }


    for (i = 0; i < COLS; i++)
    {
        for (j = 0; j < ROWS; j++)
        {
            offset = i*ROWS+j;
            g_s16stable0 = rawdata[offset] - grid_last_even_data[offset];

            if (abs(g_s16stable0) > INTER_FRAME_NOISE_DIFF_TH )
            {
                u16BigNoiDiffCnt =u16BigNoiDiffCnt + abs(g_s16stable0)/INTER_FRAME_NOISE_DIFF_TH ;
            }
        }
        if ( u16NoneNoiFrameCnt > INTER_FRAME_NOISE_AREA_TH )
        {
            break;
        }
    }

    if (u16BigNoiDiffCnt == 0 )
    {
        u16NoneNoiFrameCnt++;
        //CTS_THP_LOGE("u16NoneNoiFrameCnt   %d ", u16NoneNoiFrameCnt);
        if (u16NoneNoiFrameCnt >= NONE_NOISE_FRAME_TH )
        {
            u16NoneNoiFrameCnt =0;
            nobase_even=true;

            if (done_flag == 0)
            {
                int temp = 0;
                for (i = 0; i < COLS; i++)
                {
                    for (j = 0; j < ROWS; j++)
                    {
                        offset = i*ROWS+j;
                        temp = temp + (rawdata[offset])/(FS_RAW_DEST_VALUE/3*5);
                    }
                }

                //CTS_THP_LOGE("111   %d ", temp);
                if (temp == 0)
                {
                    cts_tcs_Calib_update();
                    done_flag = 1;
                    //CTS_THP_LOGE("11111calibra done");
                }

            }

            // CTS_THP_LOGE("find  calibration down-------nobase_even  =  %4d" ,nobase_even);
        }
    }
    else
    {
        if (u16NoneNoiFrameCnt>0)
            u16NoneNoiFrameCnt = u16NoneNoiFrameCnt>>1;
    }


    //CTS_THP_LOGD("u16BigDiffNegCnt=  %4d, u16BigNoiDiffCnt=  %4d, u16NoneNoiFrameCnt  =  %4d ++++++++++++++++++++++++++++++++++++++", u16BigDiffNegCnt, u16BigNoiDiffCnt , u16NoneNoiFrameCnt);
    //CTS_THP_LOGD("nobase_cardinal  =  %4d, nobase_even  =  %4d",  nobase_cardinal ,nobase_even);

    memcpy(grid_last_even_data, rawdata,RAWDATA_SIZE);
    u16BigDiffNegCnt =0;
}

static uint16_t tx1_line_data[(COLS_STYLUS_TIED*ROWS + ROWS_STYLUS_TIED*COLS)];
static uint16_t tx2_line_data[(COLS_STYLUS_TIED*ROWS + ROWS_STYLUS_TIED*COLS)];

void cts_convert_pc_line_data(uint16_t *data, int rows, int cols)
{
    int index = 0;
    for (int i = 0; i < rows; i++){
        for (int j = 0; j < cols; j++){
            index = i * cols + j;
#if 0            
            if (index == 0){
                data[index] = tx1PcCoffBuf[index];
                continue;
            }
            if (index == cols - 1){
                data[index] = tx1PcCoffBuf[index];
                continue;
            }
            if (index == cols*rows - cols){
                data[index] = tx1PcCoffBuf[index];
                continue;
            }
            if (index == cols*rows -1){
                data[index] = tx1PcCoffBuf[index];
                continue; 
            }                                           
#endif            
            data[index] = (uint16_t)((data[index] * tx1PcCoffBuf[index]) / 100);
        }
    }
}

void cts_convert_pr_line_data(uint16_t *data, int rows, int cols)
{
    int index = 0;
    for (int i = 0; i < rows; i++){
        for (int j = 0; j < cols; j++){
            index = i * cols + j;
#if 0            
            if (index == 0){
                data[index] = tx1PrCoffBuf[index];
                continue;
            }
            if (index == cols - 1){
                data[index] = tx1PrCoffBuf[index];
                continue;
            }
            if (index == cols*rows - cols){
                data[index] = tx1PrCoffBuf[index];
                continue;
            }
            if (index == cols*rows -1){
                data[index] = tx1PrCoffBuf[index];
                continue; 
            }                                           
#endif     
            data[index] = (uint16_t)((data[index] * tx1PrCoffBuf[index]) / 100);
        }
    }
}

void cts_remap_tx_line_data(uint16_t *stylus_frame)
{
    uint16_t offset = 0, length = 0;
    uint16_t temp1[ROWS_STYLUS_TIED*COLS],temp2[ROWS_STYLUS_TIED*COLS];
    uint16_t temp3[COLS_STYLUS_TIED*ROWS],temp4[COLS_STYLUS_TIED*ROWS];
    uint16_t temp5[ROWS_STYLUS_TIED*COLS],temp6[COLS_STYLUS_TIED*ROWS];

    offset = 0;
    length = sizeof(temp1);
    memcpy(temp1, &stylus_frame[offset], length);

    offset += ROWS_STYLUS_TIED*COLS;
    length = sizeof(temp2);
    memcpy(temp2, &stylus_frame[offset], length);
	
    memcpy(temp5, temp1, sizeof(temp5));
    cts_transposition_pr_data(temp5, temp1, COLS, ROWS_STYLUS_TIED);
    cts_convert_pr_line_data(temp1, COLS, ROWS_STYLUS_TIED);
    memcpy(temp5, temp2, sizeof(temp5));
    cts_transposition_pr_data(temp5, temp2, COLS, ROWS_STYLUS_TIED);
    cts_convert_pr_line_data(temp2, COLS, ROWS_STYLUS_TIED);
	
    offset += ROWS_STYLUS_TIED*COLS;
    length = sizeof(temp3);
    memcpy(temp3, &stylus_frame[offset], length);

    offset += COLS_STYLUS_TIED*ROWS;
    length = sizeof(temp4);
    memcpy(temp4, &stylus_frame[offset], length);

    memcpy(temp6, temp3, sizeof(temp3));
    cts_transposition_pc_data(temp6, temp3, COLS_STYLUS_TIED, ROWS);
    cts_convert_pc_line_data(temp3, COLS_STYLUS_TIED, ROWS);
	memcpy(temp6, temp4, sizeof(temp4));
    cts_transposition_pc_data(temp6, temp4, COLS_STYLUS_TIED, ROWS);
    cts_convert_pc_line_data(temp4, COLS_STYLUS_TIED, ROWS);
	
    offset = 0;
    length = sizeof(temp3);
    memcpy(&tx1_line_data[offset], temp3, length);

    offset += COLS_STYLUS_TIED*ROWS;
    length = sizeof(temp1);
    memcpy(&tx1_line_data[offset], temp1, length);


    offset = 0;
    length = sizeof(temp4);
    memcpy(&tx2_line_data[offset], temp4, length);

    offset += COLS_STYLUS_TIED*ROWS;
    length = sizeof(temp2);
    memcpy(&tx2_line_data[offset], temp2, length);

    //for (offset=0; offset <(COLS_STYLUS_TIED*ROWS + ROWS_STYLUS_TIED*COLS) ; offset++)
    // {
    //tx1_line_data[offset] /=2;
    //}

}

uint16_t stylusmode_fingerRaw_All[ROWS * COLS];
uint8_t stylusFingerStatus = 0;
// #define DUMP_STYLUS_FINGER_DATA
void cts_convert_tylusmode_grid_data(CTS_FRAME_FINGER_STYLUS_STRUCT *cts_merge_frame)
{
    uint16_t length = (int)(ROWS*COLS/4);
    uint16_t offset = 0;
    if (cts_merge_frame->frame_type == FRAME_TYPE_STYLUS_0)
    {
        memcpy(stylusmode_fingerRaw_All,cts_merge_frame->rawdata, length* sizeof(uint16_t));
        stylusFingerStatus |= 1 << 0;
#ifdef DUMP_STYLUS_FINGER_DATA
        CTS_THP_LOGI("frame_type:%2x",cts_merge_frame->frame_type);
        cts_print_stylusdata(1, stylusmode_fingerRaw_All, ROWS/4,COLS);
#endif        
    }
    offset += length;
    if (cts_merge_frame->frame_type == FRAME_TYPE_STYLUS_1)
    {
        memcpy(&stylusmode_fingerRaw_All[offset], cts_merge_frame->rawdata, length*sizeof(uint16_t));
        stylusFingerStatus |= 1 << 1;
#ifdef DUMP_STYLUS_FINGER_DATA        
        CTS_THP_LOGI("frame_type:%2x", cts_merge_frame->frame_type);
        cts_print_stylusdata(1, &stylusmode_fingerRaw_All[offset], ROWS/4,COLS );
#endif        
    }
    offset += length;
    if (cts_merge_frame->frame_type == FRAME_TYPE_STYLUS_2)
    {
        memcpy(&stylusmode_fingerRaw_All[offset], cts_merge_frame->rawdata, length* sizeof(uint16_t));
        stylusFingerStatus |= 1 << 2;
#ifdef DUMP_STYLUS_FINGER_DATA        
        CTS_THP_LOGI("frame_type:%2x", cts_merge_frame->frame_type);
        cts_print_stylusdata(1, &stylusmode_fingerRaw_All[offset], ROWS/4, COLS);
#endif        
    }
    offset += length;
    if (cts_merge_frame->frame_type == FRAME_TYPE_STYLUS_3)
    {
        memcpy(&stylusmode_fingerRaw_All[offset], cts_merge_frame->rawdata, length*sizeof(uint16_t));
        stylusFingerStatus |= 1 << 3;
#ifdef DUMP_STYLUS_FINGER_DATA
        CTS_THP_LOGI("frame_type:%2x", cts_merge_frame->frame_type);
        cts_print_stylusdata(1, &stylusmode_fingerRaw_All[offset], ROWS/4, COLS);
#endif
        if (stylusFingerStatus != 0x0F){
            CTS_THP_LOGI("stylusFingerStatus:%2x", stylusFingerStatus);
            memset(stylusmode_fingerRaw_All, 0, sizeof(stylusmode_fingerRaw_All));
            stylusFingerStatus = 0;
    	}
    }
}

static int cts_convert_frame(struct timeval *tv,CTS_FRAME_STRUCT *cts_frame,CTS_FRAME_FINGER_STYLUS_STRUCT *cts_merge_frame,THP_AFE_FRAME_DATA_STRUCT *thp_frame,THP_AFE_STYLUS_FRAME_DATA_STRUCT *stylus_frame )
{

    memset(thp_frame, 0, sizeof(*thp_frame));
    memset(stylus_frame, 0, sizeof(*stylus_frame));


    // finger data
    if ( cts_frame->frame_type == FRAME_TYPE_FINGER_0 || cts_frame->frame_type == FRAME_TYPE_FINGER_1 )
    {
        thp_frame->time_stamp.tv_sec = tv->tv_sec;
        thp_frame->time_stamp.tv_usec = tv->tv_usec;

#if  0
        //cts_transposition_grid_data(cts_frame->rawdata, grid_data, ROWS, COLS);
cts_convert_grid_data(grid_data,grid_data,ROWS, COLS);

#elif  1
	if (((cts_frame->afe_status & THP_AFE_STATUS_CALIBRATION_DONE) == THP_AFE_STATUS_CALIBRATION_DONE)
		&& !first_cali_done) {
		first_cali_done = true;
		cts_remap_grid_data(cts_frame->rawdata, baserawdata, ROWS, COLS);
		// memcpy(baserawdata, cts_frame->rawdata, ROWS * COLS * 2);
        CTS_THP_LOGI("calibration done, base update.");
	}
	cts_remap_grid_data(cts_frame->rawdata, grid_data, ROWS, COLS);
	cts_convert_grid_data(cts_frame);

#else
		uint16_t i, j;
		for (i = 0; i < (ROWS*COLS); i++)
			grid_data[ROWS*COLS-1-i] = cts_frame->rawdata[i];

		uint16_t tmpdata[ROWS*COLS];
		MEMCPY(tmpdata, grid_data, sizeof(tmpdata));
		for (i = 0; i < COLS; i++) {
			for (j = 0; j < ROWS; j++)
				grid_data[j + i * ROWS] = tmpdata[i + j * COLS];
		}

		cts_convert_grid_data(grid_data, grid_data, ROWS, COLS);
#endif

        thp_frame->frame_index = cts_frame->frame_index;
		
        thp_frame->grid_data = grid_data;
        thp_frame->line_data = NULL;
        thp_frame->button_data = NULL;
        thp_frame->noise_data = NULL;//cts_frame->finger_noise;
        thp_frame->scan_freq =  cts_frame->finger_scan_freq;
        thp_frame->scan_rate = cts_frame->finger_scan_rate;
        thp_frame->status = cts_frame->afe_status;

        //CTS_THP_LOGD("frame_index=%d,thp_frame->status =%x,scan_freq=%d,frame_type=%x,scan_rate=%d",  cts_frame->frame_index,thp_frame->status, thp_frame->scan_freq , cts_frame->frame_type, thp_frame->scan_rate);

        if ((cts_frame->afe_status & THP_AFE_STATUS_SOS) == THP_AFE_STATUS_SOS)
        {
            cts_print_rawdata(cts_frame->rawdata);
            CTS_THP_LOGI("sos");
        }

        if ( (cts_frame->afe_status & THP_AFE_STATUS_RECAL_REQUEST) == THP_AFE_STATUS_RECAL_REQUEST )
        {
            CTS_THP_LOGI("recalibration request");
        }


        if ( last_afe_status != (cts_frame->afe_status & (THP_AFE_STATUS_IDLE_MODE | THP_AFE_STATUS_ACTIVE_MODE)))
        {
            if ( last_afe_status == THP_AFE_STATUS_IDLE_MODE )
            {
                CTS_THP_LOGI("idle exit[status=0x%x]", cts_frame->afe_status );
                //CTS_THP_LOGD("Set active timeout %d ms after real active", DAEMON_GET_DATA_TIME_OUT_ACTIVE);
                thp_ioctl_set_timeout(DAEMON_GET_DATA_TIME_OUT_ACTIVE);
            }
            else
            {
                CTS_THP_LOGI("idle in[status=0x%x]", cts_frame->afe_status);
                //thp_ioctl_set_timeout(DAEMON_GET_DATA_TIME_OUT_IDLE);
            }
        }

#if 1
        if (abs(last_Frame_index - cts_frame->frame_index ) > 1 && 
            abs(last_Frame_index - cts_frame->frame_index ) < 100 && 
            last_Frame_index !=0)
        {
            CTS_THP_LOGI("LastIndex:%d, CurrentIndex:%d", last_Frame_index,cts_frame->frame_index);
        }
        else
        {
             //CTS_THP_LOGI("CurrentIndex:%d", cts_frame->frame_index);
        }
#endif

        if (last_finger_freq != thp_frame->scan_freq)
        {
            CTS_THP_LOGI("curr_freq=%d,last_freq=%d", thp_frame->scan_freq,last_finger_freq);
        }

        //CTS_THP_LOGI("curr_freq=%d,last_freq=%d", thp_frame->scan_freq,last_finger_freq);

        thp_frame->gesture = cts_frame->gesture_status;
        thp_frame->side_data = NULL;
        thp_frame->force_data = NULL;
        thp_frame->scan_state = THP_AFE_SCAN_STATE_WHOLE;


        thp_frame->stylus = stylus_frame;
        stylus_frame->tx1_line_data = tx1_line_data;
        stylus_frame->tx2_line_data = tx2_line_data;

        // stylus_frame->status = cts_frame->stylus_status|THP_AFE_STATUS_HPP3_0_PROTOCOL|THP_AFE_STATUS_STYLUS_DETECT_MODE;
        stylus_frame->status = THP_AFE_STATUS_HPP3_0_PROTOCOL|THP_AFE_STATUS_STYLUS_DETECT_MODE;
        stylus_frame->pressure = 1;
        stylus_frame->button = 0;
        stylus_frame->stylus_noise = NULL;  //cts_frame->stylus_noise;

        stylus_frame->tx1_scan_freq = cts_frame->stylus_tx1_curr_scan_freq;
        stylus_frame->tx2_scan_freq = cts_frame->stylus_tx2_curr_scan_freq;
        stylus_frame->tx1_new_scan_freq = cts_frame->stylus_tx1_next_scan_freq;
        stylus_frame->tx2_new_scan_freq = cts_frame->stylus_tx2_next_scan_freq;


        if (last_stylus_status)
        {
            CTS_THP_LOGI("stylus out");
        }

        last_afe_status = thp_frame->status & ( THP_AFE_STATUS_IDLE_MODE | THP_AFE_STATUS_ACTIVE_MODE);
        last_stylus_status =0;
        last_finger_freq = thp_frame->scan_freq;
        last_Frame_index = thp_frame->frame_index;

        return 0;
    }// finger data

    if (cts_frame->frame_type == FRAME_TYPE_STYLUS_0 || cts_frame->frame_type == FRAME_TYPE_STYLUS_1 || 
        cts_frame->frame_type == FRAME_TYPE_STYLUS_2 || cts_frame->frame_type == FRAME_TYPE_STYLUS_3)
    {
        memset(stylus_frame, 0, sizeof(*stylus_frame));

        thp_frame->time_stamp.tv_sec = tv->tv_sec;
        thp_frame->time_stamp.tv_usec = tv->tv_usec;
        thp_frame->frame_index = cts_frame->frame_index;

        cts_remap_tx_line_data(cts_merge_frame->stylusdata);
        cts_convert_tylusmode_grid_data(cts_merge_frame);

        // CTS_THP_LOGD("frame_index=%d,thp_frame->status=%x,frame_type=%x,scan_freq=%d,scan_rate=%d", cts_frame->frame_index, thp_frame->status,cts_frame->frame_type,  thp_frame->scan_freq , thp_frame->scan_rate);
        if (cts_frame->frame_type == FRAME_TYPE_STYLUS_3 && stylusFingerStatus == 0x0F) {
			cts_remap_grid_data(stylusmode_fingerRaw_All, grid_data, ROWS, COLS);
			cts_convert_grid_data(cts_frame);
            thp_frame->grid_data = grid_data;
            stylusFingerStatus = 0;
        } else {
	        thp_frame->grid_data = NULL;
        }
        thp_frame->line_data = NULL;
        thp_frame->button_data = NULL;
        thp_frame->noise_data = NULL;//cts_frame->finger_noise;
        thp_frame->scan_freq =  cts_frame->finger_scan_freq;
        thp_frame->scan_rate = cts_frame->finger_scan_rate;
        thp_frame->status = cts_frame->afe_status;
        thp_frame->status = cts_frame->afe_status & (THP_AFE_STATUS_ACTIVE_MODE|THP_AFE_STATUS_IDLE_MODE);
        thp_frame->gesture = cts_frame->gesture_status;
        thp_frame->side_data = NULL;
        thp_frame->force_data = NULL;
        thp_frame->scan_state = THP_AFE_SCAN_STATE_WHOLE;

        thp_frame->stylus = stylus_frame;
        stylus_frame->tx1_line_data = tx1_line_data;
        stylus_frame->tx2_line_data = tx2_line_data;
        //stylus_frame->status = cts_frame->stylus_status;
        stylus_frame->status = THP_AFE_STATUS_HPP3_0_PROTOCOL|THP_AFE_STATUS_STYLUS_ACTIVE_MODE;
        stylus_frame->pressure = 1;
        stylus_frame->button = 0;
        stylus_frame->stylus_noise = NULL;  //cts_frame->stylus_noise;
        stylus_frame->tx1_scan_freq = 176;//cts_frame->stylus_tx1_curr_scan_freq;
        stylus_frame->tx2_scan_freq = 251;//cts_frame->stylus_tx2_curr_scan_freq;
        stylus_frame->tx1_new_scan_freq = cts_frame->stylus_tx1_next_scan_freq;
        stylus_frame->tx2_new_scan_freq = cts_frame->stylus_tx2_next_scan_freq;

        if (last_stylus_status != stylus_frame->status)
        {
            CTS_THP_LOGI("stylus in");
        }
        last_afe_status = THP_AFE_STATUS_ACTIVE_MODE ;
        last_stylus_status=stylus_frame->status;
        last_Frame_index= cts_frame->frame_index;

        return 0;
    }

    CTS_THP_LOGE("ERROR!! Should not be here!!");
    return 0;
}

/* thp */
int cts_open(void)
{
    return cts_open_project(PROJECT_ID);
}

int cts_open_project(const char *proj_id)
{
    return strcmp(PROJECT_ID, proj_id);
}

int cts_set_calib_data_callback_func(
    THP_AFE_ERR_ENUM(*calibDataWriteCallback)(void* dataPtr, uint32_t dataLen),
    THP_AFE_ERR_ENUM(*calibDataReadCallback)(void* dataPtr, uint32_t dataLen))
{
    //yjl
    CTS_THP_LOGD("----------cts_set_calib_data_callback_func---");
    return 0;
}

int cts_start(void)
{
    int ret = -1;
    ret = thp_dev_open();
    if (ret < 0)
    {
        ret = thp_dev_open();
        if (ret < 0)
        {
            CTS_THP_LOGE("Open thp device failed");
            return -1;
        }
    }

    ret = cts_prework();
    if (ret < 0)
    {
        CTS_THP_LOGE("Do prework failed");
        return -1;
    }

#ifdef DEBUG_SOCKET_TOOL
    cts_tool_start_thread();
#endif

    ret = thp_dev_set_block(1);
    if (ret < 0)
    {
        ret = thp_dev_set_block(1);
        if (ret < 0)
        {
            CTS_THP_LOGE("Set block 1 failed");
            return -1;
        }
    }

    thp_ioctl_clear_frame_buffer(1);
    ret = thp_ioctl_hal_set_afe_status(2, 0, 0);
    if (ret < 0)
    {
        ret = thp_ioctl_hal_set_afe_status(2, 0, 0);
        if (ret < 0)
        {
            CTS_THP_LOGW("Set afe status 2,0,0 failed");
            return -1;
        }
    }
    thp_ioctl_set_irq(1);
    ret = thp_ioctl_set_timeout(DAEMON_GET_DATA_TIME_OUT_IDLE);
    if (ret)
    {
        ret = thp_ioctl_set_timeout(DAEMON_GET_DATA_TIME_OUT_IDLE);
        if (ret)
            CTS_THP_LOGE("Set timeout failed failed: rc=%d", ret);
    }
    cts_normal_mode_init();

    //cts_tcs_enable_mnt();
    return 0;
}

int cts_stop(void)
{
    int ret;
    ret = cts_postwork();
    if (ret < 0)
    {
        CTS_THP_LOGE("Do postwork failed");
    }

    ret = thp_dev_close();
    if (ret < 0)
    {
        ret = thp_dev_close();
        if (ret < 0)
            CTS_THP_LOGE("Close thp device failed");
    }
    thp_ioctl_clear_frame_buffer(1);
    return 0;
}

void cts_print_fw_status(CTS_FRAME_STRUCT *frame)
{
    CTS_THP_LOGI("index=%d,type=%x,size=%d,afe_status=%x",frame->index,frame->frame_type,frame->curr_frame_size,frame->afe_status);
    CTS_THP_LOGI("gesture_status=%x,stylus_status=%x,data_type=%x,data_len=%d",frame->gesture_status,frame->stylus_status,frame->data_type,frame->data_len);
#ifdef CTS_FW_DUMP_INFO
    if ((frame->frame_index % FRAME_NUM_TO_PRINT == (FRAME_NUM_TO_PRINT - 1)))
    {
        CTS_THP_LOGI("frame_index=%d\n",frame->frame_index);
        CTS_ID_INFO_STRUCT *id = (CTS_ID_INFO_STRUCT *)frame;
        for (int i = 0; i < CTS_ID_NUM; i++)
        {
            CTS_THP_LOGI("ID=%d,dbg_cnt=%d,job_id=%d,ddi_line_num=%d,ddi_vsync_cnt=%d,ddi_tps_cnt=%d\n",\
                     i,(id+i)->dbg_cnt,(id+i)->job_id,(id+i)->ddi_line_num,(id+i)->ddi_vsync_cnt,(id+i)->ddi_tps_cnt);
        }
        CTS_FW_DUMP_INFO_STRUCT *dump_info = (CTS_FW_DUMP_INFO_STRUCT *)frame;
        CTS_THP_LOGI("mstr_scan_go_err0_sts=0x%08x\n",dump_info->mstr_scan_go_err0_sts);
        CTS_THP_LOGI("mstr_scan_go_err1_sts=0x%08x\n",dump_info->mstr_scan_go_err1_sts);
        CTS_THP_LOGI("slave_scan_go_err0_sts=0x%08x\n",dump_info->slave_scan_go_err0_sts);
        CTS_THP_LOGI("slave_scan_go_err1_sts=0x%08x\n",dump_info->slave_scan_go_err1_sts);
        CTS_THP_LOGI("mstr_dmct_go_err0=0x0x%08x\n",dump_info->mstr_dmct_go_err0);
        CTS_THP_LOGI("mstr_dmct_go_err1=0x%08x\n",dump_info->mstr_dmct_go_err1);
        CTS_THP_LOGI("slave_dmct_go_err0=0x%08x\n",dump_info->slave_dmct_go_err0);
        CTS_THP_LOGI("slave_dmct_go_err1=0x%08x\n",dump_info->slave_dmct_go_err1);
        CTS_THP_LOGI("ddi_r_0A=0x%02x\n",dump_info->ddi_r_0A);
        CTS_THP_LOGI("ddi_fsm_state=0x%02x\n",dump_info->ddi_fsm_state);
    }
#endif
}

static bool cts_enter_spec_mode(void)
{
    if (nonblock == SCREEN_OFF_FLAG)
    {
        CTS_THP_LOGI("Get frame with nonblock or tui mode");
        return true;
    }
    return false;
}

/*
struct timeval
{
__time_t  tv_sec;        // Seconds.
__suseconds_t  tv_usec;  // Microseconds.
};

*/

THP_AFE_FRAME_DATA_STRUCT *cts_get_frame(void)
{
    CTS_FRAME_STRUCT *cts_frame;
	TIME_T start_tv;
    long elapsed_ms;
    int ret = -1;
    uint32_t count = 0;

    gettimeofday(&start_tv, NULL);

    //CTS_THP_LOGE("get_frame + ");

    ret = thp_ioctl_get_frame_count(&count);
    if (ret)
    {
        CTS_THP_LOGE("Get frame count failed");
    }
    else if (count > 0)
    {
        CTS_THP_LOGI("driver busy. get_frame_count=%d", count);
    }

    ret = cts_ioctl_get_frame(&g_ioctl_frame);
    if (ret)
    {
        CTS_THP_LOGE("Get frame from kernel failed");
        goto end_get_frame;
    }

    // CTS_THP_LOGE("check_frame + ");
    ret = cts_check_ioctl_frame(&g_ioctl_frame);
    if (ret)
    {
        CTS_THP_LOGE("Invalid frame check, ret:%d", ret);
        goto end_get_frame;
    }

    cts_frame = (CTS_FRAME_STRUCT *)&g_ioctl_frame.frame;
    current_afe_data_type = cts_frame->frame_type;

    if ( cts_frame->frame_type == FRAME_TYPE_FINGER_0 || cts_frame->frame_type == FRAME_TYPE_FINGER_1 )
    {
        tcs_cmd_delay_start();
    }

#ifdef DEBUG_SOCKET_TOOL
    cts_frame->magic_number = cts_frame->magic_number & 0xFFFF0000;
    cts_frame->magic_number |= cts_frame->frame_index;
    cts_tool_send_data_to_client(cts_frame);
    cts_tool_save_frame_data(cts_frame);
#endif

    //cts_print_rawdata(cts_frame->rawdata);

    if(0)
    cts_print_fw_status(cts_frame);

    ret = cts_convert_frame(&start_tv,cts_frame,(CTS_FRAME_FINGER_STYLUS_STRUCT *)g_ioctl_frame.frame,&g_thp_frame,&g_stylus_frame);
    if (ret)
    {
        CTS_THP_LOGE("Convert frames failed");
        goto end_get_frame;
    }

end_get_frame:
    elapsed_ms = ELAPSED_MS(start_tv);
    if (ret == 0)
    {
        //CTS_THP_LOGE("Get frame OK,cost %lldms", elapsed_ms);
        return &g_thp_frame;
    }else{        
        if ( cts_enter_spec_mode() )
            return NULL;

        cts_print_fw_status(cts_frame);
        if (elapsed_ms < GET_FRAME_TIMEOUT_MS)
        {
            CTS_THP_LOGE("Get frame error,cost %lldms", elapsed_ms);
        }else{
            CTS_THP_LOGE("Get frame failed timeout, time: %dms", elapsed_ms);
        }
    }

    return NULL;
}

int cts_clear_status(THP_AFE_STATUS_ENUM status)
{
    CTS_THP_LOGD("Clear status=0x%4x", status);
    //yjl
    cts_tcs_clear_status(status);
	first_cali_done = false;
	
    return 0;
}

void cts_screen_on_off_setflag(int flag)
{
    nonblock = flag;
}

int cts_screen_off(void)
{
    int ret;
    cts_screen_on_off_setflag(SCREEN_OFF_FLAG );
    cts_normal_mode_init();
    g_esd_flag = false;

    // cts_tool_start_gesture_data_thread();
    thp_ioctl_clear_frame_buffer(1);

    ret = thp_dev_set_block(0);
    if (ret < 0)
    {
        CTS_THP_LOGE("Set block 0 failed");
        return -1;
    }
    return 0;
}

int cts_screen_on(void)
{
    int ret;

    cts_screen_on_off_setflag(SCREEN_ON_FLAG );
    // cts_tool_stop_gesture_data_thread();
    if (cts_NeedUpgradeCheck())
    {
        ret = cts_DoUpgrade();
        if (ret < 0)
        {
            CTS_THP_LOGE("Update firmware failed");
            return -1;
        }
    }

    ret = thp_ioctl_clear_frame_buffer(1);
    if (ret < 0)
    {
        CTS_THP_LOGI("Clear frame buffer failed");
    }

    ret = thp_dev_set_block(1);
    if (ret < 0)
    {
        ret = thp_dev_set_block(1);
        if (ret < 0)
        {
            CTS_THP_LOGE("Set block 0 failed");
            return -1;
        }
    }

    ret = thp_ioctl_hal_set_afe_status(2, 0, 0);
    if (ret < 0)
    {
        CTS_THP_LOGW("Set afe status 2,0,0 failed");
    }

    thp_ioctl_set_irq(1);
    ret = thp_ioctl_set_timeout(DAEMON_GET_DATA_TIME_OUT_IDLE);
    if (ret)
    {
        ret = thp_ioctl_set_timeout(DAEMON_GET_DATA_TIME_OUT_IDLE);
        if (ret)
            CTS_THP_LOGE("Set timeout failed failed: rc=%d", ret);
    }

    cts_normal_mode_init();
    //cts_tcs_enable_mnt();

    return 0;
}


int cts_set_idle_touch_threshold(uint16_t threshold)
{

return 0;

#ifdef  MNT_EXIT_THD_DEFINED_BY_FW
    return 0;

#elif  (defined DECREASE_MNT_CMD)
    // Decrease cmd for DP416
    CTS_THP_LOGE("default--invalid");
    return 0;
#else
    MntOptions options;
    int rc;

    rc = cts_tcs_get_mnt_options(&options);
    if (rc)
    {
        CTS_THP_LOGE("Get monitor options failed: rc=%d", rc);
        return -1;
    }

    /*
        CTS_THP_LOGD("baseTraceMntEn: %d", options.baseTraceMntEn);
        CTS_THP_LOGD("reportRateDownRatio: %d", options.reportRateDownRatio);
        CTS_THP_LOGD("CfbAdjMnt: %d", options.CfbAdjMnt);
        CTS_THP_LOGD("CycleNumMnt: %d", options.CycleNumMnt);
        CTS_THP_LOGD("MntTpTh: %d", options.MntTpTh);
        CTS_THP_LOGD("EnterMntCnt: %d", options.EnterMntCnt);
        CTS_THP_LOGD("Vstim0LevelMnt: %d", options.Vstim0LevelMnt);
        CTS_THP_LOGD("ShiftNumMnt: %d", options.ShiftNumMnt);
        CTS_THP_LOGD("MntToNormalCnt: %d", options.MntToNormalCnt);
    */

    options.MntTpTh = threshold;
    CTS_THP_LOGD("Set idle threshold: %d", options.MntTpTh);
    rc = cts_tcs_set_mnt_options(&options);
    if (rc)
    {
        CTS_THP_LOGE("Set monitor options failed: rc=%d", rc);
        return -1;
    }
    return 0;
#endif
}


int cts_set_baseline_update_interval(uint16_t interval)
{

return 0;

#ifdef  MNT_EXIT_THD_DEFINED_BY_FW
    return 0;
#elif  (defined DECREASE_MNT_CMD)
    // Decrease cmd for DP416
    CTS_THP_LOGE("default--invalid");
    return 0;
#else

    MntOptions options;
    int rc;
    rc = cts_tcs_get_mnt_options(&options);
    if (rc)
    {
        CTS_THP_LOGE("Get monitor options failed: rc=%d", rc);
        return -1;
    }

    /*
        CTS_THP_LOGD("baseTraceMntEn: %d", options.baseTraceMntEn);
        CTS_THP_LOGD("reportRateDownRatio: %d", options.reportRateDownRatio);
        CTS_THP_LOGD("CfbAdjMnt: %d", options.CfbAdjMnt);
        CTS_THP_LOGD("CycleNumMnt: %d", options.CycleNumMnt);
        CTS_THP_LOGD("MntTpTh: %d", options.MntTpTh);
        CTS_THP_LOGD("EnterMntCnt: %d", options.EnterMntCnt);
        CTS_THP_LOGD("Vstim0LevelMnt: %d", options.Vstim0LevelMnt);
        CTS_THP_LOGD("ShiftNumMnt: %d", options.ShiftNumMnt);
        CTS_THP_LOGD("MntToNormalCnt: %d", options.MntToNormalCnt);
    */

    options.MntToNormalCnt = (uint16_t)(60 * interval / 1000);
    CTS_THP_LOGD("Set intverval %d to %d", interval, options.MntToNormalCnt);

    rc = cts_tcs_set_mnt_options(&options);
    if (rc)
    {
        CTS_THP_LOGE("Set monitor options failed: rc=%d", rc);
        return -1;
    }

    return 0;
#endif

}

int cts_enter_idle(void)
{

 return 0;

#ifdef DISABLE_IDLE
    CTS_THP_LOGI("Enter idle invalid");
    return 0;
#else
    int rc;

    CTS_THP_LOGI("Enter idle+");

    //CTS_THP_LOGD("Set idle timeout  %d ms before real idle",DAEMON_GET_DATA_TIME_OUT_IDLE);
    rc = thp_ioctl_set_timeout(DAEMON_GET_DATA_TIME_OUT_IDLE);
    if (rc)
    {
        CTS_THP_LOGE("Set timeout failed failed: rc=%d", rc);
        return -1;
    }

    rc = cts_tcs_force_enter_mnt();
    if (rc)
    {
        CTS_THP_LOGE("Enter monitor mode failed: rc=%d", rc);
        return -1;
    }
    //CTS_THP_LOGD("Enter idle-");
    return 0;
#endif
}

int cts_exit_idle(void)
{
    int rc =0;

    //CTS_THP_LOGD("Exit idle");
    rc = cts_tcs_force_exit_mnt();
    if (rc)
    {
        CTS_THP_LOGE("Exit monitor mode failed: rc=%d", rc);
        return -1;
    }
    //CTS_THP_LOGD("Set active timeout value after real active");
    return 0;
}


int cts_force_to_freq_point(uint8_t index)
{
    if (index >= 0 && index < MAX_NUM_SCAN_FREQ)
    {
        //yjl update
        return cts_tcs_set_scan_freq(index);
    }
    return -1;
}

//yjl
int cts_freq_shift_switch(uint8_t enable)
{
    return cts_tcs_freq_shift_switch(enable);
}

bool cts_afe_is_esd_triggered(void)
{
    if (g_esd_flag)
    {
        CTS_THP_LOGE("esd happened, report one time!!!");
        return false;
    }
    g_esd_flag = (g_thp_frame.status & 0x40) == 0x40;
    return g_esd_flag;
}
